###########################################################
# Raw Writer section
[raw_writer]
# may have multiple topic for the same processor. Seperated by a ;.
#kafka.data.in.topics = iot_msband2_hdhld; iot_msband2_accel; iot_msband2_gyroscope; iot_msband2_calorie; iot_msband2_altimeter; iot_msband2_ambientLight; iot_msband2_barometer; iot_msband2_distance; iot_msband2_uv; iot_msband2_skinTemperature; iot_msband2_gsr; iot_msband2_heartRate; iot_msband2_rrInterval
#kafka.data.in.topics = iot_msband2_calorie; iot_msband2_altimeter; iot_msband2_distance; iot_msband2_skinTemperature; iot_msband2_gsr; iot_msband2_heartRate; iot_msband2_rrInterval
kafka.data.in.topics = iot_msband2_skinTemperature; iot_msband2_gsr; iot_msband2_heartRate; iot_msband2_rrInterval
cassandra.table.hdhld = raw_hdhld
cassandra.table.accelerometer = raw_accelerometer
cassandra.table.gyroscope = raw_gyroscope
cassandra.table.altimeter = raw_altimeter
cassandra.table.ambientLight = raw_ambientLight
cassandra.table.barometer = raw_barometer
cassandra.table.calorie = raw_calorie
cassandra.table.distance = raw_distance
cassandra.table.uv = raw_uv
cassandra.table.contact = raw_contact
cassandra.table.pedometer = raw_pedometer
cassandra.table.skinTemperature = raw_skinTemperature
cassandra.table.gsr = raw_gsr
cassandra.table.heartRate = raw_heartRate
cassandra.table.rrInterval = raw_rrInterval

[framework]
path.general.project = /opt/rta_hc/rta-hc-framework-master
path.spark = /opt/rta_hc/spark-1.6.1-bin-hadoop2.6
path.kafka = /opt/rta_hc/kafka_2.10-0.9.0.0
path.zookeeper = /opt/rta_hc/kafka_2.10-0.9.0.0
path.rta.pid = /opt/rta_hc/rta-hc-framework-master/run
path.kairosDB = /opt/rta_hc/kairosdb
path.tomcat = /opt/rta_hc/apache-tomcat-7.0.61
name.accl.log = rta_processor_accel.log
name.gyro.log = rta_processor_gyro.log
name.baro.log = rta_processor_baro.log
name.aggr.log = har_predict_aggr_ensemble.log
name.raw.writer.log = raw_writer.log
name.novelty.log = novelty_detect.log
name.default.log = rta.log
spark.master_url = spark://10.3.35.93:7077

# on Cluster the Kafka port is 6667 where on local host it's 9092
kafka.host_port = 10.3.35.93:9092  
zookeeper.host_port = 10.3.35.93:9092   
kafka.control.topic = iot_processor_ctrl
kafka.group = rta_framework
spark.nb_threads = 5
# used by spark streaming StreamingContext(sc, int(batchDuration))
spark.batch_duration = 10
cassandra.cluster = 10.3.35.93
cassandra.keyspace = iot_hc
# kairosDb or Grafana
kairosdb.url = http://10.3.35.93:9090/api/v1/datapoints
kairosdb.post.size = 50
# rta-manager control
# Execution mode. Contain values [local, yarn]
execution_mode = LOCAL
yarn_rest_url = http://c9t17308.itcs.hpecorp.net:8088/ws/v1/cluster/apps?state=RUNNING
local_dev_server = c4t19765.itcs.hpecorp.net
local_dev_start_port = 4041
local_dev_end_port = 4061
local_rest_api = /api/v1/applications

[har_randomForest_accelerometer]
name = har_randomForest_accelerometer
description = this is a processor for har using random Forest for Accelerometer
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_accel
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_gyroscope]
name = har_randomForest_gyroscope
description = this is a processor for har using random Forest for gyroscope
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_gyroscope
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_altimeter]
name = har_randomForest_altimeter
description = this is a processor for har using random Forest for altimeter
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_altimeter
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_ambientLight]
name = har_randomForest_ambientLight
description = this is a processor for har using random Forest for ambientLight
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_ambientLight
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_barometer]
name = har_randomForest_barometer
description = this is a processor for har using random Forest for barometer
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_barometer
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_calorie]
name = har_randomForest_calorie
description = this is a processor for har using random Forest for calorie
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_calorie
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_distance]
name = har_randomForest_distance
description = this is a processor for har using random Forest for distance
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_distance
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_randomForest_uv]
name = har_randomForest_uv
description = this is a processor for har using random Forest for UV
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_msband2_uv
# output sent to the next processor
kafka.data.out.topic = iot_har_predict_aggr
# list of jar seperated by ,
spark.lib = ../lib/spark-streaming-kafka_2.10-1.6.0.jar,../lib/kafka_2.10-0.8.0.jar,../lib/metrics-core-2.2.0.jar,../lib/zkclient-0.3.jar

[har_predict_aggr]
name = har_predict_aggr
description = this is a processor for aggregating har coming from the different sensor processor
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_har_predict_aggr
# output sent to the next processor
kafka.data.out.topic = iot_har_novelty_detect
# The sensor with the highest data rate. Name IS aligned with the SENSORS_ACTIVITY_TYPE value in rta_constants.py 
# accepted value: accelerometer gyroscope
sensor_ref_timestamp = gyroscope
# The duration in ms for accumulating rdd before processing
buffer_time_window = 15000
# Cassandra table name which contains prediction results from har_predict_aggr
cassandra.data.target.table = har_prediction 

[novelty_detect]
name = novelty_detect
description = this is a processor for performing the novelty detection (baysian model)
# In data traffic (from the sensors) may have multiple topic for the same processor. Seperated by a ;.
kafka.data.in.topics = iot_har_novelty_detect;iot_msband2_skinTemperature; iot_msband2_gsr; iot_msband2_heartRate; iot_msband2_rrInterval
novel_threshold = 0.15
novel_window_size_limit = 20
novel_rate_theshold = 0.1 
# The sensor with the highest data rate. Name IS aligned with the SENSORS_ACTIVITY_TYPE value in rta_constants.py 
sensor_ref_timestamp = heartRate
# The duration in ms for accumulating rdd before processing
buffer_time_window = 10000

[sklearn]
window_seconds = 10000
project_models_folder = /opt/rta_hc/rta-hc-framework-master/data-models

[platform_mon]
# List of hosts that can run the platform monitor
# procs_profile is mapping a profile that must exist in the conf directory. 
#   The file name converntion is rta_<profile_name>.properties
hosts_list = {"hosts_list":[{"hostname":"hpe-smartwatch-03","procs_profile":"main-analytic"}]}
log_lines = 1000
